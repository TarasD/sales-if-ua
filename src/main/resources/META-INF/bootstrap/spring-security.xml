<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/security
   http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <!-- This is where we configure Spring-Security  -->
    <security:http auto-config="false" use-expressions="true" access-denied-page="/denied"
                   entry-point-ref="authenticationEntryPoint">

        <security:intercept-url pattern="/#/home" access="permitAll"/>
        <security:intercept-url pattern="/#/admin" access="hasRole('ROLE_ADMIN')"/>

        <security:logout
                invalidate-session="true"
                logout-success-url="/#/home"
                logout-url="/logout"/>

        <security:custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER"/>
        <security:custom-filter ref="concurrencyFilter" position="CONCURRENT_SESSION_FILTER"/>
        <security:session-management session-authentication-strategy-ref="sas"/>
    </security:http>

    <bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"
          p:sessionAuthenticationStrategy-ref="sas"
          p:authenticationManager-ref="authenticationManager"
          p:authenticationFailureHandler-ref="customAuthenticationFailureHandler"
          p:authenticationSuccessHandler-ref="customAuthenticationSuccessHandler"/>

    <!-- Default failure url -->
    <bean id="customAuthenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
          p:defaultFailureUrl="/login/failure" />

    <!-- Default success url -->
    <bean id="customAuthenticationSuccessHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler"
          p:defaultTargetUrl="/login/success" />

    <!-- The AuthenticationEntryPoint is responsible for redirecting the user to a particular page, like a login page,
       whenever the server sends back a response requiring authentication -->
    <bean id="authenticationEntryPoint"  class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"
          p:loginFormUrl="/#/home"/>

    <!-- Declare an authentication-manager to use a custom userDetailsService -->
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider user-service-ref="customUserDetailsService">
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <bean id="customUserDetailsService" class="sales.security.CustomUserDetailsService" />

    <!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
    <bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>

    <bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter"
          p:sessionRegistry-ref="sessionRegistry"
          p:expiredUrl="/#/stuff" />

    <bean id="sas" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy"
          p:maximumSessions="1" >
          <constructor-arg name="sessionRegistry" ref="sessionRegistry" />
    </bean>

    <!-- Maintains a registry of SessionInformation instances -->
    <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />
</beans>